Quality Assurance of PA&C Outputs
=================================

The current suite of QA routines perform two functions: estimating the uncertainty on fit telescope/CU parameters and
generating an uncertainty matrix that pairs with the demodulation matrix output by `pac_demod`.

Parameter Uncertainties
-----------------------

Due to the extremely complicated :math:`\chi^2` space, uncertainties on the fit parameters (either CU or M3-6) are
computed via Markov-Chain Monte Carlo (MCMC) methods. To run MCMC analysis the saved fitting statistics must have been
saved during the initial fit by passing the ``-S`` option to either `pac_demod` or `pac_tele`. If generated, the
fitting stats will be saved in a directory called "fitaux", which can be used by the `pac_mcmc` program:

.. code-block:: console

  pac_mcmc [-h] [-b BURN] [-N NUM_STEPS] [-w NUM_WALKERS] aux_dir

with options

:aux_dir: The directory containing fitting statistics. Probably called "fitaux"

:-h: Display help and exit

:-b INT: Burn the first INT steps of the MCMC sample chain. Useful to let MCMC walkers fill out parameter space before doing analysis.

:-N INT: Specify number of steps each MCMC walker will take

:-w INT: Specify the number of MCMC walkers to use

The output consists of a python pickle file and a set of MCMC analysis plots for each detector position found in
``aux_dir``. These files will be saved in the same ``aux_dir`` given as input to `pac_mcmc`.

Example Usage
*************

Starting from the example given in :doc:`demod` (assuming the ``-S`` option was used) we have

.. code-block:: console

  $ ls -1
  DEMOD.fits
  fitaux
  SoCC
  pac-pipeline

From a little bit of testing I'd say that for fits of the CU parameters only (i.e., not fitting M3-6) the minimum number
of MCMC steps (for the default 256 walkers) is about 100. Furthermore, it takes about 50 steps before the walkers are
spread evenly across parameter space. Thus, let's do

.. code-block:: console

  $ pac_mcmc -b 50 -N 150 fitaux
  MCMCError.py:main_MCMC: found fits for 1 detector positions
  MCMCError.py:main_MCMC: analyzing position (0, 0) from fitaux/fitobj_00000000.pkl
  MCMCError.py:analyze_pickle:  starting MCMC analysis with keywords {'burn': 50, 'nwalkers': 256, 'steps': 150}
         x34       t34       x56       t56  ret0h_00  dreth_00 ret045_00 dret45_00  ret0r_00  dretr_00     chisq t_elapsed
       1.018     3.613     0.924     3.196     1.550     1.048     2.349     0.753     1.118     0.750 1.362e+01     5.1 m
  MCMCError.py:run_MCMC: completed in 306.133 s
  MCMCError.py:analyze_pickle:  plotting results
  MCMCError.py:analyze_pickle:  saving results to fitaux/mcmcsav_00000000.pkl

You'll also see files called fitaux/mcmcsav_00000000_corner.pdf and fitaux/mcmcsav_00000000_traces.pdf. The first shows
an `MCMC corner plot <https://corner.readthedocs.io/en/latest/pages/quickstart.html>`_, and the second a set of traces
for each parameter. The corner plot is useful for understanding the probability distribution for each parameter as well
as any correlations between parameters. The trace plot is useful for assessing if enough burn-in was done.

Demodulation Matrix Uncertainties
---------------------------------

Some instrument pipelines might want uncertainty estimates on demodulation matrices for propagation of their own
uncertainty estimates. In this case the `pac_demod_err` program offers a solution. It operates on the results of the
MCMC analysis described above, so make sure your MCMC analysis was good and complete. The calling sequence is

.. code-block:: console

  pac_demod_err [-h] [-s SUFFIX] [-t TELESCOPE_DB] [-p] data_dir demod_file output

with options

:data_dir: Directory containing a single Calibration Sequence. This is the same directory that was the input to `pac_demod`.

:demod_file: The Demodulation matrix file generated by `pac_demod`

:output: Location of FITS file in which to save uncertainty on ``demod_file``

:-h: Display help text and exit

:-s SUFFIX: Control which files in ``data_dir`` are loaded. The file mask is ``data_dir/*SUFFIX``

:-t FILE: Load Telescope Model parameters from the provided database. Defaults to ``./telescope_db.txt``

:-p: Generate plots showing the value distribution of each entry in the Demodulation matrices

Example Usage
*************

Starting where we left off above

.. code-block:: console

  $ ls -1
  DEMOD.fits
  fitaux
  SoCC
  pac-pipeline
  $ pac_demod_err -t pac-pipeline/telescope_db.txt -p SoCC DEMOD.fits DEMOD_err.fits
  MCMCError.py:main_demod_err: loaded polcal data from 10e-3
  MCMCError.py:main_demod_err: updating polarizer py value
  CUModel.py:set_py_from_database: py = 0.007555 at  620 nm
  MCMCError.py:main_demod_err: loading telescope database from ../../telescope_db.txt
  MCMCError.py:main_demod_err: found fits for 1 detector positions
  MCMCError.py:main_demod_err: computing err for position (0, 0)
  MCMCError.py:get_demod_stack: loaded MCMC results from SoCC/fitaux/mcmcsav_00000000.pkl
  MCMCError.py:get_demod_stack: reading MCMC steps: 10000/10000 (100%)
  MCMCError.py:plot_demod_err: generating demodulation uncertainty plot
  MCMCError.py:main_demod_err: saving plots to DEMOD_err.pdf

"DEMOD_err.fits" has exactly the same format as "DEMOD.fits" and contains associated uncertainties. "DEMOD_err.pdf"
shows a probability distribution for each entry of the demodulation matrix.

