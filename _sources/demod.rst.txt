Computation of Demodulation Matrices
====================================

pac_demod
---------

Calculation of demodulation matrices is provided by the `pac_demod` program. It has the following calling sequence:

.. code-block:: console

  pac_demod [-h] [-f] [-t TELESCOPE_DB] [-s SUFFIX] data_dir CU_pars output

The options are:

:data_dir: A directory containing data for a single PolCal Calibration Sequence. The format of the data is described below and in detail in an upcoming SPEC.

:CU_pars: A file containing (potentially resampled) CU parameters. This is the output of `pac_cu_pars`

:output: Demodulation matrices are saved to a FITS specified by this option

:-h: Print some help text and exit

:-f: Overwrite ``output`` if it exists. Otherwise the program will throw and error.

:-t FILE: Load Telescope Model parameters from the provided database. Defaults to ``./telescope_db.txt``

:-s SUFFIX: Control which files in ``data_dir`` are loaded. The file mask is ``data_dir/*SUFFIX``

Input Data
----------

`pac_demod` needs a Set of Calibration Curves (SoCC) to compute demodulation matrices. A single Calibration Curve (CC)
describes the intensity of a single modulator state as a function of Calibration Sequence step. The set of CCs for all
instrument modulator states is a SoCC.

If the Calibration Sequence had *N* steps and the instrument in question has *M* modulation states then the SoCC will
be organized into *N* FITS files, each with *M* ImageHDUs. All of the ImageHDUs will be two-dimensional with the same
shape, (X, Y). A separate demodulation matrix will be computed for each of the (X, Y) locations.

Example Usage
-------------

Generating Fake Data
********************
See the section in :doc:`cupar`

Fitting CU Parameters and Computing Demodulation Matrices
*********************************************************

Now that we have suitable data let's fit these parameters and compute some demodulation matrices.

.. code-block:: console

  $ cd ../
  $ pac_demod -t pac-pipeline/telescope_db.txt -S SoCC CUPAR.fits DEMOD.fits
  Data.py:fit_intensity_trend: Average flux in clear measurements: 31420.584
  GenerateDemodMatrices.py:main: loaded SoCC from tmp/
  generic.py:load_fit_mode: using PA&C fitting recipe "baseline"
  GenerateDemodMatrices.py:main: loaded CU Model Parameters from CMP.fits
  generic.py:load_fit_mode: using PA&C fitting recipe "baseline"
  GenerateDemodMatrices.py:main: updating polarizer py value
  CUModel.py:set_py_from_database: py = 0.008137 at  588 nm
  GenerateDemodMatrices.py:main: loading telescope database from telescope_db.txt
  GenerateDemodMatrices.py:main: shape of Drawer: (1, 1)
  GenerateDemodMatrices.py:main: computing demoduation matrices
  GenerateDemodMatrices.py:main:  position = (0, 0)
  GenerateDemodMatrices.py:main:  fitting modulation matrix to best CU model
  GenerateDemodMatrices.py:main:  computing inverse of modulation matrix
  GenerateDemodMatrices.py:main: saving demodulation matrices to DEMOD.fits
  $ ls -1
  CUPAR.fits
  DEMOD.fits
  fitaux
  SoCC
  pac-pipeline

The demodulation matrices live in DEMOD.fits.
